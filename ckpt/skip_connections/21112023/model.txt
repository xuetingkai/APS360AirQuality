class CNNLSTM(nn.Module):
    def __init__(self):
        super().__init__()
        self.name = "CNNLSTM"
        self.pool = nn.MaxPool1d(kernel_size=2, stride=2)
        # self.conv1 = nn.Conv1d(in_channels=12, out_channels=64, kernel_size=3, stride=1, padding=1)
        # self.norm1 = nn.BatchNorm1d(num_features = 64)
        # self.conv2 = nn.Conv1d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)
        # self.norm2 = nn.BatchNorm1d(num_features = 64)
        # self.conv3 = nn.Conv1d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)
        # self.norm3 = nn.BatchNorm1d(num_features = 64)

        self.conv1 = nn.Conv1d(in_channels=12, out_channels=12, kernel_size=3, stride=1, padding=1)
        self.norm1 = nn.BatchNorm1d(num_features = 24)
        self.conv2 = nn.Conv1d(in_channels=24, out_channels=24, kernel_size=3, stride=1, padding=1)
        self.norm2 = nn.BatchNorm1d(num_features = 48)
        self.conv3 = nn.Conv1d(in_channels=48, out_channels=48, kernel_size=3, stride=1, padding=1)
        self.norm3 = nn.BatchNorm1d(num_features = 96)

        self.lstm = nn.LSTM(input_size=48*14, hidden_size=50, num_layers=3, batch_first=True)
        self.linear1 = nn.Linear(50, 20)
        self.linear2 = nn.Linear(20, 14)

    def forward(self, x):
        x = F.relu(self.norm1(torch.cat((x, self.conv1(x)), dim=1)))
        x = F.relu(self.norm2(torch.cat((x, self.conv2(x)), dim=1)))
        x = F.relu(self.norm3(torch.cat((x, self.conv3(x)), dim=1)))
        x = self.pool(x)
        x = x.view(-1, 48*14)
        # x = x.squeeze(dim=2)
        x, _ = self.lstm(x)
        x = F.relu(self.linear1(x))
        x = self.linear2(x)
        return x